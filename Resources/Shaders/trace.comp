#version 450
#extension GL_GOOGLE_include_directive : enable
layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba32f) uniform image2D traceImage;

layout(binding = 1) uniform GlobalSetting {
    vec3 cameraPosition;
    vec3 cameraRight;
    vec3 cameraUp;
    vec3 cameraFront;
    vec4 cameraParam;
    vec4 screenParam;
} globalSetting;

struct Ray {
    vec3 origin;
    vec3 direction;
};

Ray genCameraRay()
{
    float width = float(globalSetting.screenParam.x);
    float height = float(globalSetting.screenParam.y);
    float invWidth = 1.0 / width;
    float invHeight = 1.0 / height;
    float aspectratio = width / height;
    float fov = 45.0 * 3.1415926 / 180.0;
    float angle = tan(0.5 * fov);

    float x = float(gl_GlobalInvocationID.x) - 0.5;
    float y = float(gl_GlobalInvocationID.y) - 0.5;

    x = (2.0f * ((x + 0.5f) * invWidth) - 1) * angle * aspectratio;
    y = -(1.0f - 2.0f * ((y + 0.5f) * invHeight)) * angle;

    vec3 dir = normalize(x * globalSetting.cameraRight + y * globalSetting.cameraUp + globalSetting.cameraFront);

    Ray ray;
    ray.origin = globalSetting.cameraPosition;
    ray.direction = dir;
    return ray;
}

void main()
{
    Ray ray = genCameraRay();
    vec3 ro = ray.origin;
    vec3 rd = ray.direction;
    vec3 color = vec3(0.0);
    float t = 0.0;
    int maxSteps = 32;
    for(int i = 0; i < maxSteps; ++i)
    {
        vec3 p = ro + rd * t;
        float d = length(p - vec3(0.0, 0.0, -10.0)) - 2.0;
        if(d < 0.001)
        {
            color = vec3(1.0);
            break;
        }

        t += d;
    }
    vec4 res = vec4(color, 1.0);
    imageStore(traceImage, ivec2(gl_GlobalInvocationID.xy), res);
}
#version 450
#extension GL_GOOGLE_include_directive : enable
#include "data.glsl"
layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) uniform SceneSeting
{
    vec4 cameraParams;
    vec3 cameraPosition;
    vec3 cameraFront;
    vec3 cameraUp;
    uint frameCount;
    uint screenWidth;
    uint screenHeight;
} globalSceneSeting;

layout(std140, binding = 1) buffer TargetBuffer
{
    vec3 globalPixels[ ];
};

layout(std140, binding = 2) buffer SceneBVHNodeBuffer
{
    BVHNode globalSceneBVHNodes[ ];
};

layout(std140, binding = 3) buffer TriangleBuffer
{
    Triangle globalTriangles[ ];
};

layout(std140, binding = 4) buffer MaterialBuffer
{
    Material globalMaterials[ ];
};

float rand(inout uvec2 seed)
{
    seed += uvec2(1);
    uvec2 q = 1103515245U * ( (seed >> 1U) ^ (seed.yx) );
    uint  n = 1103515245U * ( (q.x) ^ (q.y >> 3U) );
    return float(n) * (1.0 / float(0xffffffffU));
}

//bool intersectTri(vec3 rayOrigin, vec3 rayDir, vec3 p0, vec3 p1, vec3 p2)
//{
//    vec3 e1 = p1 - p0;
//    vec3 e2 = p2 - p0;
//    vec3 p = cross(dir, e2);
//
//    float a = dot(e1, p);
//
//    if(abs(a) < 0.0001)
//        return false;
//    float f = 1.0 / a;
//    vec3 s = orig - p0;
//    float u = f * dot(s, p);
//
//    if(u < 0.0 || u > 1.0)
//        return false;
//    vec3 q = cross(s, e1);
//    float v = f*dot(dir, q);
//    if(v < 0.0 || (u + v) > 1.0)
//        return false;
//    return true;
//}
//
//bool intersectBBox(vec3 rayOrigin, vec3 rayDir, vec3 bboxMin, vec3 bboxMax)
//{
//    float low = (min.x - orig.x)/dir.x;
//    float high = (max.x - orig.x)/dir.x;
//    float txmin =  min(low, high);
//    float txmax = max(low, high);
//
//    low = (min.y - orig.y)/dir.y;
//    high = (max.y - orig.y)/dir.y;
//    float tymin =  min(low, high);
//    float tymax = max(low, high);
//
//    if ((txmin > tymax) || (tymin > txmax))
//        return false;
//
//    low = (min.z - orig.z)/dir.z;
//    high = (max.z - orig.z)/dir.z;
//    float tzmin = min(low, high);
//    float tzmax = max(low, high);
//
//    if ((txmin > tzmax) || (tzmin > txmax))
//        return false;
//
//    return true;
//}
//
//Ray createCameraRay(inout uvec2 seed)
//{
//    float width = float(globalSceneSeting.screenWidth);
//    float height = float(globalSceneSeting.screenHeight);
//    float invWidth = 1.0 / width;
//    float invHeight = 1.0 / height;
//    float aspectratio = width / height;
//    float fov = 45.0 * 3.1415 / 180.0;
//    float angle = tan(0.5 * fov);
//
//    float x = float(gl_GlobalInvocationID.x) + rand(seed) - 0.5;
//    float y = float(gl_GlobalInvocationID.y) + rand(seed) - 0.5;
//
//    x = (2.0f * ((x + 0.5f) * invWidth) - 1) * angle * aspectratio;
//    y = -(1.0f - 2.0f * ((y + 0.5f) * invHeight)) * angle;
//
//    vec3 dir = normalize(x * cross(globalSceneSeting.cameraFront, globalSceneSeting.cameraUp) + y * globalSceneSeting.cameraUp + globalSceneSeting.cameraFront);
//
//    Ray ray;
//    ray.origin = globalSceneSeting.cameraPosition;
//    ray.dir = dir;
//    return ray;
//}

void main()
{
    uvec2 seed = uvec2(globalSceneSeting.frameCount, globalSceneSeting.frameCount + 1.0) * uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    int index = int(gl_GlobalInvocationID);
    globalPixels[index] = normalize(globalSceneSeting.cameraFront);
}